import org.apache.spark.{SparkConf, SparkContext}
import breeze.linalg._
import admm.functions._
import admm.solver.ConsensusADMMSolver
import admm.linalg.BlockMatrix
import org.apache.spark.Logging

val master_url = "ec2-54-225-39-165.compute-1.amazonaws.com"
val conf = new SparkConf().
  setMaster(s"spark://$master_url:7077").
  setSparkHome("/root/scratch").
  setJars(List("/root/admm/code/target/scala-2.10/ADMM-assembly-1.0.jar")).
  setAppName("ADMM Lasso").
  set("spark.executor.memory", "11g")
val sc = new SparkContext(conf)

val blocksize = 1024
val abstol = 1e-5
val reltol = 1e-5

val rho = 0.01
val lambda = 0.5

val small = new BlockMatrix(sc.textFile(s"hdfs://$master_url:9000/root/matrix/small.csv"), blocksize)
val med = new BlockMatrix(sc.textFile(s"hdfs://$master_url:9000/root/matrix/medium.csv"), blocksize)
val lrg = new BlockMatrix(sc.textFile(s"hdfs://$master_url:9000/root/matrix/large.csv"), blocksize)

val f = L2NormSquared.fromMatrix(med, rho)
val g = new L1Norm(params.lambda)
var admm = new ConsensusADMMSolver(f,g abstol, reltol, sc, s"hdfs://$master_url:9000/root/scratch")
admm.solve(rho, 500)
val optval = f(admm.z) + g(admm.z)

println("Solution: " + admm.z)
println("**********")
println("  Optval: " + optval)
println("**********")

